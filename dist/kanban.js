(()=>{"use strict";const t="Enter",e="Escape",s="priority",n="active",r="completed",a={NONE:"select",FIRST:"primary",SECOND:"secondary"},o="https://js-todo-list-9ca3a.df.r.appspot.com/api/teams";function i(t){return document.querySelector(t)}function c(t){return 0===Object.keys(t).length&&JSON.stringify(t)===JSON.stringify({})}function d(){const t={};return window.location.search.replace(/[?&]+([^=&]+)=([^&]*)/gi,(function(e,s,n){t[s]=n})),t}function l(t){return"FIRST"===t?1:"SECOND"===t?2:"NONE"===t?3:void 0}function m(t,e){return l(t.priority)-l(e.priority)}function p(t){let e=t.todoList;return e=function(t,e="all"){return{all:t,[n]:t.filter((t=>!t.isCompleted)),[r]:t.filter((t=>t.isCompleted)),[s]:[...t].sort(m)}[e]}(e,t.filter),`\n    <li class="todoapp-container">\n      ${c=t.name,`\n      <h2>\n        <span><strong>${c}</strong>'s Todo List</span>\n      </h2>\n    `}\n      <div class="todoapp" data-member-id="${t._id}">\n        <section class="input-container">\n      <input class="new-todo" placeholder="할 일을 입력해주세요." autofocus />\n    </section>\n    \n        <section class="main">\n          <ul class="todo-list">\n            ${e.map((t=>function({_id:t,contents:e,isCompleted:s,priority:n}){return`\n    <li id="${t}" class="${s&&"completed"}">\n      <div class="view">\n        <input id="${t}" data-action="toggle" class="toggle" type="checkbox" ${s&&"checked"}/>\n        <label class="label">\n          ${function(t){return`\n    <div class="chip-container">\n      <select class="chip select ${a[t]}" >\n        <option value="NONE" ${"select"===a[t]?"selected":""}>\n          순위\n        </option>\n        <option value="FIRST" ${"primary"===a[t]?"selected":""}>\n          1순위\n        </option>\n        <option value="SECOND" ${"secondary"===a[t]?"selected":""}>2순위\n        </option>\n      </select>\n    </div>\n    `}(n)}\n          ${e}\n        </label>\n        <button id=${t} data-action="destroy" class="destroy"></button>\n      </div>\n      <input id="${t}" class="edit" value=${e} />\n    </li>\n    `}(t)))}\n          </ul>\n        </section>\n        ${o=e.length,i=t.filter,`\n    <div class="count-container">\n    <span class="todo-count">총 <strong>${o}</strong> 개</span>\n    <ul class="filters">\n      <li>\n        <a href="#all" data-action="change-filter" data-type="all" \n          class="${"all"===i?"selected":""}"  \n        >\n          전체보기\n        </a>\n      </li>\n      <li>\n        <a href="#priority" data-action="change-filter" data-type="priority"\n          class="${i===s?"selected":""}"\n        >\n          우선 순위\n        </a>\n      </li>\n      <li>\n        <a href="#active" data-action="change-filter" data-type="active"\n          class="${i===n?"selected":""}"\n        >\n          해야할 일\n        </a>\n      </li>\n      <li>\n        <a href="#completed"  data-action="change-filter"  data-type="completed" \n          class="${i===r?"selected":""}" data-type="completed"\n        >\n          완료한 일\n        </a>\n      </li>\n    </ul>\n    <button data-action="clear-completed" class="clear-completed" >모두 삭제</button>\n  </div>\n    `}\n      </div>\n    </li>\n    `;var o,i,c}const u={get:(t="")=>fetch(t),post(t="",e={}){const s={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)};return fetch(t,s)},put(t="",e={}){const s={method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)};return fetch(t,s)},delete:(t="")=>fetch(t,{method:"DELETE",headers:{"Content-Type":"application/json"}})},h=async t=>{try{const e=await u.get((t=>`${o}/${t}`)(t));if(e.ok)return e.json();throw new Error(`${e.status}, ${e.statusText}`)}catch(t){console.error(`GET Team Error: ${t}`)}},b=async(t,e,s)=>{try{const n=await u.post(((t,e)=>`${o}/${t}/members/${e}/items`)(t,e),s);if(n.ok)return n.json();throw new Error(`${n.status}, ${n.statusText}`)}catch(t){console.error(`Create Member Error: ${t}`)}},y=async(t,e,s)=>{try{const n=await u.delete(((t,e,s)=>`${o}/${t}/members/${e}/items/${s}`)(t,e,s));if(n.ok)return n.json();throw new Error(`${n.status}, ${n.statusText}`)}catch(t){console.error(`Create Member Error: ${t}`)}},$=async(t,e,s,n)=>{try{const r=await u.put(((t,e,s)=>`${o}/${t}/members/${e}/items/${s}`)(t,e,s),n);if(r.ok)return r.json();throw new Error(`${r.status}, ${r.statusText}`)}catch(t){console.error(`Create Member Error: ${t}`)}},E=async(t,e,s)=>{try{const n=await u.put(((t,e,s)=>`${o}/${t}/members/${e}/items/${s}/toggle`)(t,e,s));if(n.ok)return n.json();throw new Error(`${n.status}, ${n.statusText}`)}catch(t){console.error(`Create Member Error: ${t}`)}},f=async(t,e,s,n)=>{try{const r=await u.put(((t,e,s)=>`${o}/${t}/members/${e}/items/${s}/priority`)(t,e,s),n);if(r.ok)return r.json();throw new Error(`${r.status}, ${r.statusText}`)}catch(t){console.error(`Create Member Error: ${t}`)}},T=async(t,e)=>{try{const s=await u.delete(((t,e)=>`${o}/${t}/members/${e}/items`)(t,e));if(s.ok)return s.json();throw new Error(`${s.status}, ${s.statusText}`)}catch(t){console.error(`Create Member Error: ${t}`)}},g=async(t,e)=>{try{const s=await u.post((t=>`${o}/${t}/members`)(t),e);if(s.ok)return s.json();throw new Error(`${s.status}, ${s.statusText}`)}catch(t){console.error(`Create Member Error: ${t}`)}},w="members/INIT_STATE",I="members/CREATE_MEMBER",v="members/ADD_TODO_ITEM",L="members/DELETE_TODO_ITEM",_="members/TOGGLE_TODO_ITEM",O="members/UPDTATE_CONTENTS_TODO_ITEM",M="members/ALL_DELETE_TODO_ITEM",C="members/CHANGE_PRIORITY_TODO_ITEM",k="members/CHANGE_FILTER",N=[],D=new class extends class{constructor(){this.observers=[]}subscribe(t){this.observers=this.observers.concat(t)}publish(){this.observers.forEach((t=>t()))}}{constructor(t){super(),this._members=[],this.reducer=t}get(){return this._members}set(t){this._members=t,this.publish()}dispatch(t){const e=this.reducer(this.get(),t);this.set(e)}}((function(t=N,e){const s=t,{type:n,payload:r}=e;switch(n){case w:return r.members.map((t=>({...t,filter:"all"})));case I:return s.concat({...r.member,filter:"all"});case v:return s.map((t=>t._id===r.memberId?{...t,todoList:t.todoList.concat(r.todoItem)}:t));case L:return s.map((t=>t._id===r.memberId?{...t,todoList:t.todoList.filter((t=>t._id!==r.itemId))}:t));case _:case O:return s.map((t=>t._id===r.memberId?{...t,todoList:t.todoList.map((t=>t._id===r.itemId?r.todoItem:t))}:t));case M:return s.map((t=>t._id===r.memberId?{...t,todoList:[]}:t));case C:return s.map((t=>t._id===r.memberId?{...t,todoList:t.todoList.map((t=>t._id===r.itemId?r.todoItem:t))}:t));case k:return s.map((t=>t._id===r.memberId?{...t,filter:r.filter}:t));default:throw new Error(`존재하지 않는 action 입니다: ${n}`)}}));class S{constructor(){this.$target=i(".todoapp-list-container"),D.subscribe(this.render.bind(this)),this.init()}async init(){const t=d().id,e=await h(t),{members:s,name:n}=e;i("#user-title").innerHTML=`\n    <span><strong>${n}</strong>'s Todo List</span>\n  `,D.dispatch((t=>({type:w,payload:{members:t}}))(s)),this.addEvent()}addEvent(){this.$target.addEventListener("keypress",this.addTodo.bind(this)),this.$target.addEventListener("keyup",this.closeEditMode.bind(this)),this.$target.addEventListener("click",this.clickHandler.bind(this)),this.$target.addEventListener("dblclick",this.openEditMode.bind(this)),this.$target.addEventListener("change",this.changePirority.bind(this))}clickHandler({target:t}){const e=j(),s=x(t),n=t.id;t.dataset.action&&{destroy:()=>this.deleteTodo(e,s,n),toggle:()=>this.toggleTodo(e,s,n),"clear-completed":()=>this.allDeleteTodo(e,s),"change-filter":()=>this.changeFilter(s,t),"add-member":()=>this.createMember(e)}[t.dataset.action]()}async createMember(t){const e=prompt("이름을 입력해주세요.");if(!e)return;const s=await g(t,{name:e});if(c(s))return;const n=s.members,r=n[n.length-1];D.dispatch((t=>({type:I,payload:{member:t}}))(r))}async addTodo({code:e,target:s}){if(e!==t)return;if(!s.classList.contains("new-todo"))return;if(s.value.length<2)return void alert("컨텐츠 생성 오류 - 최소 2글자 이상이어야 합니다.");const n=j(),r=x(s),a=s.value,o=await b(n,r,{contents:a});o&&D.dispatch(((t,e)=>({type:v,payload:{memberId:t,todoItem:e}}))(r,o))}async deleteTodo(t,e,s){await y(t,e,s),D.dispatch(((t,e)=>({type:L,payload:{memberId:t,itemId:e}}))(e,s))}async toggleTodo(t,e,s){const n=await E(t,e,s);c(n)||D.dispatch(((t,e,s)=>({type:_,payload:{memberId:t,itemId:e,todoItem:s}}))(e,s,n))}async updateTodoContents(t,e,s,n){const r=await $(t,e,s,{contents:n});c(r)||D.dispatch(((t,e,s)=>({type:O,payload:{memberId:t,itemId:e,todoItem:s}}))(e,s,r))}async allDeleteTodo(t,e){await T(t,e),D.dispatch((t=>({type:M,payload:{memberId:t}}))(e))}async changePirority({target:t}){if(!t.classList.contains("chip"))return;const e=j(),s=x(t),n=t.closest("li").id,r=t.value;if(r===a.select)return;const o=await f(e,s,n,{priority:r});c(o)||D.dispatch(((t,e,s)=>({type:C,payload:{memberId:t,itemId:e,todoItem:s}}))(s,n,o))}changeFilter(t,e){const s=e.dataset.type;D.dispatch(((t,e)=>({type:k,payload:{memberId:t,filter:e}}))(t,s))}openEditMode({target:t}){"label"===t.classList.value&&t.closest("li").classList.add("editing")}closeEditMode({target:s,key:n}){if(n!==e&&n!==t)return;if(s.classList.contains("new-todo"))return;const r=s.closest("li");if(n===e)return void r.classList.remove("editing");const a=j(),o=x(s),i=s.id,c=r.querySelector(".edit").value;this.updateTodoContents(a,o,i,c)}render(){this.$target.innerHTML=`\n      ${D.get().map((t=>p(t)))}\n      <li class="add-user-button-container">\n        <button id="add-user-button" class="ripple" data-action="add-member">\n          <span class="material-icons" data-action="add-member">add</span>\n        </button>\n      </li>  \n    `}}const j=()=>d().id,x=t=>{const e=t.closest(".todoapp");return e&&e.dataset.memberId};window.addEventListener("load",(function(){new S}))})();