(()=>{"use strict";const t="Enter",e="Escape",n="priority",s="active",o="completed",r={NONE:"select",FIRST:"primary",SECOND:"secondary"},a="https://js-todo-list-9ca3a.df.r.appspot.com/api/teams";function i(t){return document.querySelector(t)}function c(t){return 0===Object.keys(t).length&&JSON.stringify(t)===JSON.stringify({})}function d(){const t={};return window.location.search.replace(/[?&]+([^=&]+)=([^&]*)/gi,(function(e,n,s){t[n]=s})),t}function l(t){return"FIRST"===t?1:"SECOND"===t?2:"NONE"===t?3:void 0}function u(t,e){return l(t.priority)-l(e.priority)}function p(t){let e=t.todoList;return e=function(t,e="all"){return{all:t,[s]:t.filter((t=>!t.isCompleted)),[o]:t.filter((t=>t.isCompleted)),[n]:[...t].sort(u)}[e]}(e,t.filter),`\n    <li class="todoapp-container">\n      ${c=t.name,`\n      <h2>\n        <span><strong>${c}</strong>'s Todo List</span>\n      </h2>\n    `}\n      <div class="todoapp" data-member-id="${t._id}">\n        <section class="input-container">\n      <input class="new-todo" placeholder="할 일을 입력해주세요." autofocus />\n    </section>\n    \n        <section class="main">\n          <ul class="todo-list">\n            ${e.map((t=>function({_id:t,contents:e,isCompleted:n,priority:s}){return`\n    <li id="${t}" class="${n&&"completed"}">\n      <div class="view">\n        <input id="${t}" data-action="toggle" class="toggle" type="checkbox" ${n&&"checked"}/>\n        <label class="label">\n          ${function(t){return`\n    <div class="chip-container">\n      <select class="chip select ${r[t]}" >\n        <option value="NONE" ${"select"===r[t]?"selected":""}>\n          순위\n        </option>\n        <option value="FIRST" ${"primary"===r[t]?"selected":""}>\n          1순위\n        </option>\n        <option value="SECOND" ${"secondary"===r[t]?"selected":""}>2순위\n        </option>\n      </select>\n    </div>\n    `}(s)}\n          ${e}\n        </label>\n        <button id=${t} data-action="destroy" class="destroy"></button>\n      </div>\n      <input id="${t}" class="edit" value=${e} />\n    </li>\n    `}(t)))}\n          </ul>\n        </section>\n        ${a=e.length,i=t.filter,`\n    <div class="count-container">\n    <span class="todo-count">총 <strong>${a}</strong> 개</span>\n    <ul class="filters">\n      <li>\n        <a href="#all" data-action="change-filter" data-type="all" \n          class="${"all"===i?"selected":""}"  \n        >\n          전체보기\n        </a>\n      </li>\n      <li>\n        <a href="#priority" data-action="change-filter" data-type="priority"\n          class="${i===n?"selected":""}"\n        >\n          우선 순위\n        </a>\n      </li>\n      <li>\n        <a href="#active" data-action="change-filter" data-type="active"\n          class="${i===s?"selected":""}"\n        >\n          해야할 일\n        </a>\n      </li>\n      <li>\n        <a href="#completed"  data-action="change-filter"  data-type="completed" \n          class="${i===o?"selected":""}" data-type="completed"\n        >\n          완료한 일\n        </a>\n      </li>\n    </ul>\n    <button data-action="clear-completed" class="clear-completed" >모두 삭제</button>\n  </div>\n    `}\n      </div>\n    </li>\n    `;var a,i,c}const h={get:(t="")=>fetch(t),post(t="",e={}){const n={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)};return fetch(t,n)},put(t="",e={}){const n={method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)};return fetch(t,n)},delete:(t="")=>fetch(t,{method:"DELETE",headers:{"Content-Type":"application/json"}})},m=async t=>{try{const e=await h.get((t=>`${a}/${t}`)(t));if(e.ok)return e.json();throw new Error(`${e.status}, ${e.statusText}`)}catch(t){console.error(`GET Team Error: ${t}`)}},$=async(t,e,n)=>{try{const s=await h.post(((t,e)=>`${a}/${t}/members/${e}/items`)(t,e),n);if(s.ok)return s.json();throw new Error(`${s.status}, ${s.statusText}`)}catch(t){console.error(`Create Member Error: ${t}`)}},f=async(t,e,n)=>{try{const s=await h.delete(((t,e,n)=>`${a}/${t}/members/${e}/items/${n}`)(t,e,n));if(s.ok)return s.json();throw new Error(`${s.status}, ${s.statusText}`)}catch(t){console.error(`Create Member Error: ${t}`)}},y=async(t,e,n,s)=>{try{const o=await h.put(((t,e,n)=>`${a}/${t}/members/${e}/items/${n}`)(t,e,n),s);if(o.ok)return o.json();throw new Error(`${o.status}, ${o.statusText}`)}catch(t){console.error(`Create Member Error: ${t}`)}},g=async(t,e,n)=>{try{const s=await h.put(((t,e,n)=>`${a}/${t}/members/${e}/items/${n}/toggle`)(t,e,n));if(s.ok)return s.json();throw new Error(`${s.status}, ${s.statusText}`)}catch(t){console.error(`Create Member Error: ${t}`)}},b=async(t,e,n,s)=>{try{const o=await h.put(((t,e,n)=>`${a}/${t}/members/${e}/items/${n}/priority`)(t,e,n),s);if(o.ok)return o.json();throw new Error(`${o.status}, ${o.statusText}`)}catch(t){console.error(`Create Member Error: ${t}`)}},w=async(t,e)=>{try{const n=await h.delete(((t,e)=>`${a}/${t}/members/${e}/items`)(t,e));if(n.ok)return n.json();throw new Error(`${n.status}, ${n.statusText}`)}catch(t){console.error(`Create Member Error: ${t}`)}},E=async(t,e)=>{try{const n=await h.post((t=>`${a}/${t}/members`)(t),e);if(n.ok)return n.json();throw new Error(`${n.status}, ${n.statusText}`)}catch(t){console.error(`Create Member Error: ${t}`)}},v=new class extends class{constructor(){this.observers=[]}subscribe(t){this.observers=this.observers.concat(t)}publish(){this.observers.forEach((t=>t()))}}{constructor(){super(),this._members=[]}get(){return this._members}set(t){this._members=t,this.publish()}};class T{constructor(){this.$target=i(".todoapp-list-container"),v.subscribe(this.render.bind(this)),this.init()}async init(){const t=d().id,e=await m(t),{members:n,name:s}=e;v.set(n.map((t=>({...t,filter:"all"})))),i("#user-title").innerHTML=`\n    <span><strong>${s}</strong>'s Todo List</span>\n  `,this.addEvent()}addEvent(){this.$target.addEventListener("keypress",this.addTodo.bind(this)),this.$target.addEventListener("keyup",this.closeEditMode.bind(this)),this.$target.addEventListener("click",this.clickHandler.bind(this)),this.$target.addEventListener("dblclick",this.openEditMode.bind(this)),this.$target.addEventListener("change",this.changeSelector.bind(this))}clickHandler({target:t}){const e=L(),n=k(t),s=t.id;t.dataset.action&&{destroy:()=>this.deleteTodo(e,n,s),toggle:()=>this.toggleTodo(e,n,s),"clear-completed":()=>this.allDeleteTodo(e,n),"change-filter":()=>this.changeFilter(n,t),"add-member":()=>this.createMember(e)}[t.dataset.action]()}async changeSelector({target:t}){if(!t.classList.contains("chip"))return;const e=L(),n=k(t),s=t.closest("li").id,o=t.value;if(o===r.select)return;const a=await b(e,n,s,{priority:o});if(c(a))return;const i=v.get().map((t=>t._id===n?{...t,todoList:t.todoList.map((t=>t._id===s?a:t))}:t));v.set(i)}async addTodo({code:e,target:n}){if(e!==t)return;if(!n.classList.contains("new-todo"))return;if(n.value.length<2)return void alert("컨텐츠 생성 오류 - 최소 2글자 이상이어야 합니다.");const s=L(),o=k(n),r=n.value,a=await $(s,o,{contents:r});if(!a)return;const i=v.get().map((t=>t._id===o?{...t,todoList:t.todoList.concat(a)}:t));v.set(i)}async deleteTodo(t,e,n){await f(t,e,n);const s=v.get().map((t=>t._id===e?{...t,todoList:t.todoList.filter((t=>t._id!==n))}:t));v.set(s)}async toggleTodo(t,e,n){const s=await g(t,e,n);if(c(s))return;const o=v.get().map((t=>t._id===e?{...t,todoList:t.todoList.map((t=>t._id===n?s:t))}:t));v.set(o)}async updateTodoContents(t,e,n,s){const o=await y(t,e,n,{contents:s});if(c(o))return;const r=v.get().map((t=>t._id===e?{...t,todoList:t.todoList.map((t=>t._id===n?o:t))}:t));v.set(r)}async allDeleteTodo(t,e){await w(t,e);const n=v.get().map((t=>t._id===e?{...t,todoList:[]}:t));v.set(n)}async createMember(t){const e=prompt("이름을 입력해주세요.");if(!e)return;const n=await E(t,{name:e});if(c(n))return;const s=n.members;v.set(s.map((t=>({...t,filter:"all"}))))}changeFilter(t,e){const n=e.dataset.type,s=v.get().map((e=>e._id===t?{...e,filter:n}:e));v.set(s)}openEditMode({target:t}){"label"===t.classList.value&&t.closest("li").classList.add("editing")}closeEditMode({target:n,key:s}){if(s!==e&&s!==t)return;if(n.classList.contains("new-todo"))return;const o=n.closest("li");if(s===e)return void o.classList.remove("editing");const r=L(),a=k(n),i=n.id,c=o.querySelector(".edit").value;this.updateTodoContents(r,a,i,c)}async render(){this.$target.innerHTML=`\n      ${v.get().map((t=>p(t)))}\n      <li class="add-user-button-container">\n        <button id="add-user-button" class="ripple" data-action="add-member">\n          <span class="material-icons" data-action="add-member">add</span>\n        </button>\n      </li>  \n    `}}const L=()=>d().id,k=t=>{const e=t.closest(".todoapp");return e&&e.dataset.memberId};window.addEventListener("load",(function(){new T}))})();